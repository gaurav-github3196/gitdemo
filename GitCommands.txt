To start with git from scratch:

1) Working copy : This is refer to the project that you are working on you local machine.
2) Staging area : Once you are done with your project, move your files in which you have done changes and wanted to be part of your next commit in staging area.
3) Local repository : Once the all required files have been moved to staging area, commit those changes in local repository. It helps you to maintain the version control on local machine.
4) Remote repository : Similar to local repository, it maintains version control on remote server. 


Beginer flow:
Step 1) Create local repository
Command : git init
It creates empty repository on your local machine that is .git folder.

Step 2) Track the status of files.
Command : git status
This commands compare your working copy and local repository, based on that you may find the following stages of a file in working directory.
Untracked files : These files are newly created and never committed in local repository.
Modified files : Files in which changes are done and not committed.

Step 3) Add files in staging area
Command : git add <file name>
This commands add files in stagin area.
Differenet ways to use add command :
1) git add : To add a specific list of files to staging area.
2) git add --all : To add all files of current directory to staging area.
3) git add docs/ : To add all files in a particular directory to staging area.
4) git add *.txt : To add text files (or any specific extension files) to staging area.

Step 4) Configure username and email to authorize the identity.
Command : 
git config --global user.email "you@example.com"
git config --global user.name "Your Name"

Step 5) Commit your changes to local repository.
Command : git commit -m "Commit message"

Step 6) Add a new remote repository.
Command : git remote add origin <remote repository url>
Create a new repository on git and use repository url to add remote repository reference to your project.

Step 7) Push the local repository changes to remote repository.
Command : git push -u origin master
In the command, the origin is your default remote repository name and '-u' flag is upstream, which is equivalent to '-set-upstream' and the master is the branch.

Advance:
1) Create a new branch.
Command : git branch <branch name>

2) Switch between the branch
Command : git checkout <branch name>

3) Merge the branch
Command : git merge <branch name>

4) Push the changes to master
Command : git push –u origin master

5) After merging the new branch to the master branch, new branch is no longer required. So you can delete that branch.
Command :
Delete from local - git branch –d <branch name>
Delete from remote - git push origin –delete <branch name>

Merge conflicts:
Scenario 1: Pick one or the other
If you want to keep local version of excel file then simply use following code:
git checkout --ours <file name>
git add <file name>
git commit -m "Choosing file from local repository to resolve conflict"

If you want to keep remote version of excel file then simply use following code:
git checkout --theirs <file name>
git add <file name>
git commit -m "Choosing file from master branch to resolve conflict"


Scenario 2: Merge content of both files
1) Run following command :
git mergetool

result (if merge tool is not configured):

This message is displayed because 'merge.tool' is not configured.
See 'git mergetool --tool-help' or 'git help config' for more details.
'git mergetool' will now attempt to use one of the following tools:
tortoisemerge emerge vimdiff
Merging:
contact_list.xlsm

Normal merge conflict for 'contact_list.xlsm':
  {local}: modified file
  {remote}: modified file
Hit return to start merge resolution tool (vimdiff):


2) Now simply hit Ctrl-C which will terminate instead of trying to open the files. If you look at your folder, you have now four additional files next to excel file (where conflict occurred)
e.g:
contact_list_BACKUP_8576.xlsm
contact_list_BASE_8576.xlsm
contact_list_LOCAL_8576.xlsm
contact_list_REMOTE_8576.xlsm

3) Make changes in your local file (contact_list.xlsm). Once we’re happy with the combined contact_list.xlsm, simply run the usual commands:
git add contact_list.xlsm
git commit -m "resolved merge conflicts"